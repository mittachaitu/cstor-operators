/*
Copyright 2020 The OpenEBS Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package partprobe

import (
	"fmt"
	"os/exec"
	"strings"

	"github.com/pkg/errors"
)

const (
	// Operation represents the command that executes against provided devices
	Operation = "partprobe"
)

// Disk represents the for 'partprobe' operation
type Disk struct {
	// Device represents the path to disks
	Device []string

	// error
	err error

	// command string
	Command string
}

// NewDisk returns new instance of object Disk
func NewDisk() *Disk {
	return &Disk{}
}

// WithDevice method fills the Device field of PoolOnline object.
func (d *Disk) WithDevice(dev string) *Disk {
	d.Device = append(d.Device, dev)
	return d
}

// Execute is to execute generated partprobe against disk object
func (d *Disk) Execute() ([]byte, error) {
	d, err := d.Build()
	if err != nil {
		return nil, err
	}
	fmt.Printf("Command %s\n", d.Command)
	// execute command here
	// #nosec
	return exec.Command("bash", "-c", d.Command).CombinedOutput()
}

// Build returns the Disk object generated by builder
func (d *Disk) Build() (*Disk, error) {
	var c strings.Builder
	d.appendCommand(&c, fmt.Sprintf("%s ", Operation))
	if IsDeviceSet()(d) {
		for _, device := range d.Device {
			d.appendCommand(&c, fmt.Sprintf(" %s ", device))
		}
	}
	d.Command = c.String()
	return d, d.err
}

// appendCommand append string to given string builder
func (d *Disk) appendCommand(c *strings.Builder, cmd string) {
	_, err := c.WriteString(cmd)
	if err != nil {
		if d.err != nil {
			d.err = errors.Wrapf(d.err, "Failed to append cmd{%s} : %s", cmd, err.Error())
		} else {
			d.err = errors.Errorf("Failed to append cmd{%s} : %s", cmd, err.Error())
		}
	}
}
